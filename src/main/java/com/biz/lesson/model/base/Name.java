package com.biz.lesson.model.base;import javax.persistence.Column;import javax.persistence.Embeddable;import org.apache.commons.lang.StringUtils;import org.hibernate.validator.constraints.Length;import com.biz.lesson.web.servlet.DataStorageThreadLocalHolder;/** * 名称 (用来封装 多个名称) */@Embeddablepublic class Name implements java.io.Serializable {    @Column(length = 255)    @Length(min = 0, max = 255)    private String primary;    @Column(length = 255)    @Length(min = 0, max = 255)    private String secondary;    public Name() {        super();    }    public Name(String primary, String secondary) {        this();        setPrimary(primary);        setSecondary(secondary);    }    public String getPrimary() {        return primary;    }    public void setPrimary(String primary) {        this.primary = primary;    }    public String getSecondary() {        return secondary;    }    public void setSecondary(String secondary) {        this.secondary = secondary;    }    public String toString() {        return DataStorageThreadLocalHolder.getI18nName(this);    }        public String getFullString(){		if(StringUtils.isNotBlank(secondary) && StringUtils.isNotBlank(primary)){			return secondary +" ("+primary+")";		}else{			return (StringUtils.isNotBlank(secondary) ? secondary : "") + 			(StringUtils.isNotBlank(primary) ? primary : "");		}    }    public String getPrimaryPath() {        String str = primary == null ? "" : primary.replaceAll("\\(.*\\)", "").replaceAll("\\W", "-").replaceAll("_", "-").replaceAll("-+", "-").toLowerCase();        return str;    }    public String getSecondaryPath() {        return secondary == null ? "" : secondary.replaceAll("\\(.*\\)", "").replaceAll("\\W", "-").replaceAll("_", "-").replaceAll("-+", "-").toLowerCase();    }    @Override    public boolean equals(Object o) {        if (this == o)            return true;        if (o == null || getClass() != o.getClass())            return false;        Name name = (Name) o;        if (primary != null ? !primary.equals(name.primary) : name.primary != null)            return false;        return !(secondary != null ? !secondary.equals(name.secondary) : name.secondary != null);    }    @Override    public int hashCode() {        int result = primary != null ? primary.hashCode() : 0;        result = 31 * result + (secondary != null ? secondary.hashCode() : 0);        return result;    }        	public void fillName() {		if (StringUtils.isNotBlank(primary) && StringUtils.isBlank(secondary)) {			secondary = primary;		} 		if (StringUtils.isNotBlank(secondary) && StringUtils.isBlank(primary)) {			primary = secondary;		}	}}